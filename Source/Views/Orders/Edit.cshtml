@model SampleDeliveryService.Models.Order

@{
    ViewData["Title"] = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- Azure Maps SDK -->
<script src="https://atlas.microsoft.com/sdk/javascript/mapcontrol/3/atlas.min.js"></script>
<link rel="stylesheet" href="https://atlas.microsoft.com/sdk/javascript/mapcontrol/3/atlas.min.css" />

<h2>Edit Order</h2>

<div class="row">
    <div class="col-md-6">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <input asp-for="Id" class="form-control" hidden />

            <div class="form-group">
                <label asp-for="FirstName"></label>
                <input asp-for="FirstName" class="form-control" />
            </div>

            <div class="form-group">
                <label asp-for="LastName"></label>
                <input asp-for="LastName" class="form-control" />
            </div>

            <div class="form-group">
                <label asp-for="Packages"></label>
                <input asp-for="Packages" class="form-control" type="number" />
            </div>

            <div class="form-group">
                <label for="queryTbx">Search Address</label>
                <input id="queryTbx" class="form-control" placeholder="Type to search..." />
            </div>

            <div class="form-group">
                <label asp-for="Street"></label>
                <input asp-for="Street" id="street_input" class="form-control" readonly />
            </div>

            <div class="form-group">
                <label asp-for="City"></label>
                <input asp-for="City" id="city_input" class="form-control" readonly />
            </div>

            <div class="form-group">
                <label asp-for="State"></label>
                <input asp-for="State" id="state_input" class="form-control" readonly />
            </div>

            <div class="form-group">
                <label asp-for="ZipCode"></label>
                <input asp-for="ZipCode" id="zip_input" class="form-control" readonly />
            </div>

            <div class="form-group form-check">
                <input asp-for="Completed" class="form-check-input" type="checkbox" />
                <label class="form-check-label">@Html.DisplayNameFor(m => m.Completed)</label>
            </div>

            <input asp-for="Latitude" id="lat_input" class="form-control" hidden />
            <input asp-for="Longitude" id="lon_input" class="form-control" hidden />

            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
                <a asp-action="List" class="btn btn-secondary">Cancel</a>
            </div>
        </form>
    </div>

    <div class="col-md-6">
        <div id="myMap" style="width:100%; height:500px;"></div>
    </div>
</div>

@section Scripts {
    <script type="text/javascript">
        var map, datasource, marker;

        const endLat = parseFloat("@Model.Latitude");
        const endLon = parseFloat("@Model.Longitude");

        const geocodeUrl = 'https://{azMapsDomain}/search/address/json?typeahead=true&api-version=1&query={query}&language=en-US&lon={lon}&lat={lat}&countrySet=IN&view=Auto';

        function getCookie(name) {
            const ca = document.cookie.split(';');
            const nameEQ = name + "=";
            for (let c of ca) {
                while (c.charAt(0) === ' ') c = c.substring(1);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length);
            }
            return null;
        }

        function tokenResolver() {
            if (this.readyState === 4 && this.status === 200) resolveFunc(this.responseText);
            else if (this.readyState === 4) rejectFunc(this.responseText);
        }

        window.onload = function () {
            var resolveFunc, rejectFunc;
            map = new atlas.Map('myMap', {
                center: [endLon, endLat],
                zoom: 14,
                view: 'Auto',
                authOptions: {
                    authType: "anonymous",
                    clientId: getClientId(),
                    getToken: function (resolve, reject, map) {
                        resolveFunc = resolve;
                        rejectFunc = reject;
                        const xhttp = new XMLHttpRequest();
                        xhttp.onreadystatechange = tokenResolver;
                        xhttp.open("GET", "/api/token", true);
                        xhttp.setRequestHeader("Authorization", 'Bearer ' + getCookie("Authorization"));
                        xhttp.send();
                    }
                }
            });

            map.events.add('ready', function () {
                datasource = new atlas.source.DataSource();
                map.sources.add(datasource);

                marker = new atlas.HtmlMarker({
                    color: 'orange',
                    position: [endLon, endLat]
                });
                map.markers.add(marker);

                $("#queryTbx").autocomplete({
                    minLength: 3,
                    source: function (request, response) {
                        const center = map.getCamera().center;
                        let url = geocodeUrl
                            .replace('{query}', encodeURIComponent(request.term))
                            .replace('{lon}', center[0])
                            .replace('{lat}', center[1])
                            .replace('{azMapsDomain}', atlas.getDomain());

                        fetch(url)
                            .then(res => res.json())
                            .then(data => response(data.results));
                    },
                    select: function (event, ui) {
                        const pos = ui.item.position;
                        const addr = ui.item.address;

                        $("#street_input").val((addr.streetNumber || "") + " " + (addr.streetName || ""));
                        $("#city_input").val(addr.municipality || "");
                        $("#state_input").val(addr.countrySubdivisionName || "");
                        $("#zip_input").val(addr.postalCode || "");
                        $("#lat_input").val(pos.lat);
                        $("#lon_input").val(pos.lon);

                        // Remove old marker
                        map.markers.remove(marker);

                        // Add new marker
                        marker = new atlas.HtmlMarker({
                            color: 'green',
                            position: [pos.lon, pos.lat]
                        });
                        map.markers.add(marker);

                        map.setCamera({
                            center: [pos.lon, pos.lat],
                            zoom: 15
                        });
                    }
                }).autocomplete("instance")._renderItem = function (ul, item) {
                    return $("<li>").append("<div>" + item.address.freeformAddress + "</div>").appendTo(ul);
                };
            });
        };
    </script>

    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
