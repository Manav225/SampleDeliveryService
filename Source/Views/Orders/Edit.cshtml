@model SampleDeliveryService.Models.Order

@{
    ViewData["Title"] = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script type='text/javascript'>
    var map;
    //Note that the typeahead parameter is set to true.
    var geocodeServiceUrlTemplate = 'https://{azMapsDomain}/search/{searchType}/json?typeahead=true&api-version=1&query={query}&language={language}&lon={lon}&lat={lat}&countrySet={countrySet}&view=Auto';

    function GetMap() {
        var resolveFunc = null;
        var rejectFunc = null;
        function tokenResolver() {
            if (this.readyState === 4 && this.status === 200) {
                resolveFunc(this.responseText);
            } else if (this.status !== 200) {
                rejectFunc(this.responseText);
            }
        }
        function getCookie(name) {
            var nameEQ = name + "=";
            var ca = document.cookie.split(';');
            for (var i = 0; i < ca.length; i++) {
                var c = ca[i];
                while (c.charAt(0) == ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }
        //Initialize a map instance.
        map = new atlas.Map('myMap', {
            center: [@Model.Longitude , @Model.Latitude],
            zoom: 13,
            view: 'Auto',
            language: 'en-US',
            //Add authentication details for connecting to Azure Maps.
            authOptions: {
                authType: "anonymous",
                clientId: getClientId(),
                getToken: function (resolve, reject, map) {
                    var xhttp = new XMLHttpRequest();
                    var url = "/api/token";
                    resolveFunc = resolve;
                    rejectFunc = reject;
                    xhttp.open("GET", url, true);
                    xhttp.setRequestHeader("Authorization", 'Bearer ' + getCookie("Authorization"));
                    xhttp.onreadystatechange = tokenResolver;
                    xhttp.send();
                }
            }
        });

        //Wait until the map resources are ready.
        map.events.add('ready', function () {
            map.markers.add(new atlas.HtmlMarker({
                color: 'Orange',
                position: [@Model.Longitude, @Model.Latitude]
            }));

            //Create a data source to store the data in.
            datasource = new atlas.source.DataSource();
            map.sources.add(datasource);

            //Add a layer for rendering point data.
            map.layers.add(new atlas.layer.SymbolLayer(datasource));

            //Create a jQuery autocomplete UI widget.
            $("#queryTbx").autocomplete({
                minLength: 3,   //Don't ask for suggestions until atleast 3 characters have been typed. This will reduce costs by not making requests that will likely not have much relevance.
                source: function (request, response) {
                    var center = map.getCamera().center;

                    //Create a URL to the Azure Maps search service to perform the search.
                    var requestUrl = geocodeServiceUrlTemplate.replace('{query}', encodeURIComponent(request.term))
                        .replace('{searchType}', 'address')
                        .replace('{language}', 'en-US')
                        .replace('{lon}', center[0])    //Use a lat and lon value of the center the map to bais the results to the current map view.
                        .replace('{lat}', center[1])
                        .replace('{countrySet}', 'US'); //A comma seperated string of country codes Modelo limit the suggestions to.

                    processRequest(requestUrl).then(data => {
                        response(data.results);
                    });
                },
                select: function (event, ui) {
                    //Remove any previous added data from the map.
                    datasource.clear();

                    //Create a point feature to mark the selected location.
                    datasource.add(new atlas.data.Feature(new atlas.data.Point([ui.item.position.lon, ui.item.position.lat]), ui.item));

                    $("#street_input").val(ui.item.address.streetNumber + ' ' + ui.item.address.streetName);
                    $("#city_input").val(ui.item.address.municipality);
                    $("#state_input").val(ui.item.address.countrySubdivisionName);
                    $("#zip_input").val(ui.item.address.postalCode);
                    $("#lat_input").val(ui.item.position.lat);
                    $("#lon_input").val(ui.item.position.lon);
                    //Zoom the map into the selected location.
                    map.setCamera({
                        bounds: [
                            ui.item.viewport.topLeftPoint.lon, ui.item.viewport.btmRightPoint.lat,
                            ui.item.viewport.btmRightPoint.lon, ui.item.viewport.topLeftPoint.lat
                        ],
                        padding: 30
                    });
                }
            }).autocomplete("instance")._renderItem = function (ul, item) {
                //Format the displayed suggestion to show the formatted suggestion string.
                var suggestionLabel = item.address.freeformAddress;

                if (item.poi && item.poi.name) {
                    suggestionLabel = item.poi.name + ' (' + suggestionLabel + ')';
                }

                return $("<li>")
                    .append("<a>" + suggestionLabel + "</a>")
                    .appendTo(ul);
            };
        });
    }

    function processRequest(url) {
        //This is a reusable function that sets the Azure Maps platform domain, sings the request, and makes use of any transformRequest set on the map.
        return new Promise((resolve, reject) => {
            //Replace the domain placeholder to ensure the same Azure Maps cloud is used throughout the app.
            url = url.replace('{azMapsDomain}', atlas.getDomain());

            //Get the authentication details from the map for use in the request.
            var requestParams = map.authentication.signRequest({ url: url });

            //Transform the request.
            var transform = map.getServiceOptions().tranformRequest;
            if (transform) {
                requestParams = transform(request);
            }

            fetch(requestParams.url, {
                method: 'GET',
                mode: 'cors',
                headers: new Headers(requestParams.headers)
            })
                .then(r => r.json(), e => reject(e))
                .then(r => {
                    resolve(r);
                }, e => reject(e));
        });
    }
</script>

<h1>Edit</h1>

<h4>Order</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Id" class="control-label"></label>
                <input asp-for="Id" class="form-control" />
                <span asp-validation-for="Id" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="FirstName" class="control-label"></label>
                <input asp-for="FirstName" class="form-control" />
                <span asp-validation-for="FirstName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="LastName" class="control-label"></label>
                <input asp-for="LastName" class="form-control" />
                <span asp-validation-for="LastName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Packages" class="control-label"></label>
                <input asp-for="Packages" class="form-control" />
                <span asp-validation-for="Packages" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label" for="queryTbx">Address</label>
                <input class="form-control" id="queryTbx" placeholder="Search an address using this box.">
            </div>
            <div class="form-group">
                <label asp-for="Street" class="control-label"></label>
                <input asp-for="Street" class="form-control" id="street_input" readonly />
                <span asp-validation-for="Street" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="City" class="control-label"></label>
                <input asp-for="City" class="form-control" id="city_input" readonly />
                <span asp-validation-for="City" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="State" class="control-label"></label>
                <input asp-for="State" class="form-control" id="state_input" readonly />
                <span asp-validation-for="State" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ZipCode" class="control-label"></label>
                <input asp-for="ZipCode" class="form-control" id="zip_input" readonly />
                <span asp-validation-for="ZipCode" class="text-danger"></span>
            </div>
            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="Completed" /> @Html.DisplayNameFor(model => model.Completed)
                </label>
            </div>
            <div id="myMap" style="position:relative;width:100%;min-width:290px;height:500px;"></div>
            <br>
            <input asp-for="Latitude" class="form-control" id="lat_input" readonly hidden />
            <input asp-for="Longitude" class="form-control" id="lon_input" readonly hidden />
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-controller="Orders" asp-action="List">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
