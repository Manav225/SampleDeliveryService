@model SampleDeliveryService.Models.Order

@{
    ViewData["Title"] = "Route";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script type="text/javascript">
    var user_lon;
    var user_lat;

    window.onload = function() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(showPosition);
            GetMap();
         
        } else {
            alert("Geolocation is not supported by this browser.");
        }
        function showPosition(position) {
            user_lat = position.coords.latitude;
            user_lon = position.coords.longitude;
        }
    }

    var map, datasource;

    var restRoutingRequestUrl = 'https://{azMapsDomain}/route/directions/json?api-version=1&query={query}&routeRepresentation=polyline&travelMode=car&view=Auto';

    var resolveFunc = null;
    var rejectFunc = null;
    function tokenResolver() {
        if (this.readyState === 4 && this.status === 200) {
            resolveFunc(this.responseText);
        } else if (this.status !== 200) {
            rejectFunc(this.responseText);
        }
    }
    function getCookie(name) {
        var nameEQ = name + "=";
        var ca = document.cookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') c = c.substring(1, c.length);
            if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
        }
        return null;
    }

    function GetMap() {
        //Initialize a map instance.
        map = new atlas.Map('myMap', {
            center: [-122.33, 47.6],
            zoom: 12,
            view: 'Auto',

            //Add authentication details for connecting to Azure Maps.
            authOptions: {
                authType: "anonymous",
                clientId: getClientId(),
                getToken: function (resolve, reject, map) {
                    var xhttp = new XMLHttpRequest();
                    var url = "/api/token";
                    resolveFunc = resolve;
                    rejectFunc = reject;
                    xhttp.open("GET", url, true);
                    xhttp.setRequestHeader("Authorization", 'Bearer ' + getCookie("Authorization"));
                    xhttp.onreadystatechange = tokenResolver;
                    xhttp.send();
                }
            }
        });

        //Wait until the map resources are ready.
        map.events.add('ready', function () {
            //Create a data source and add it to the map.
            datasource = new atlas.source.DataSource();
            map.sources.add(datasource);

            //Add a layer for rendering the route line and have it render under the map labels.
            map.layers.add(new atlas.layer.LineLayer(datasource, null, {
                strokeColor: '#2272B9',
                strokeWidth: 5,
                lineJoin: 'round',
                lineCap: 'round'
            }), 'labels');

            //Add a layer for rendering point data.
            map.layers.add(new atlas.layer.SymbolLayer(datasource, null, {
                iconOptions: {
                    image: ['get', 'iconImage'],
                    allowOverlap: true,
                    ignorePlacement: true
                },
                textOptions: {
                    textField: ['get', 'title'],
                    offset: [0, 1]
                },
                filter: ['any', ['==', ['geometry-type'], 'Point'], ['==', ['geometry-type'], 'MultiPoint']] //Only render Point or MultiPoints in this layer.
            }));

            /* Create the GeoJSON objects which represent the start and end point of the route */
            var startPosition = [user_lon, user_lat];
            var startPoint = new atlas.data.Feature(new atlas.data.Point(startPosition), {
                title: 'User Location',
                iconImage: 'pin-blue'
            });

            var endPosition = [@Model.Longitude, @Model.Latitude];
            var endPoint = new atlas.data.Feature(new atlas.data.Point(endPosition), {
                title: 'Order Drop Off',
                iconImage: 'pin-red'
            });

            //Add the data to the data source.
            datasource.add([startPoint, endPoint]);

            //Fit the map window to the bounding box defined by the start and end positions.
            map.setCamera({
                bounds: atlas.data.BoundingBox.fromPositions([startPosition, endPosition]),
                padding: 50
            });

            //Create the route request with the query being the start and end point in the format 'startLongitude,startLatitude:endLongitude,endLatitude'.
            var requestUrl = restRoutingRequestUrl.replace('{query}', `${startPosition[1]},${startPosition[0]}:${endPosition[1]},${endPosition[0]}`);

            //Process the request and render the route result on the map.
            processRequest(requestUrl).then(response => {
                var route = response.routes[0];
                if (route) {
                    var routeCoordinates = [];
                    for (var legIndex = 0; legIndex < route.legs.length; legIndex++) {
                        var leg = route.legs[legIndex];

                        //Convert the route point data into a format that the map control understands.
                        var legCoordinates = leg.points.map(function (point) {
                            return [point.longitude, point.latitude];
                        });

                        //Combine the route point data for each route leg together to form a single path.
                        routeCoordinates = routeCoordinates.concat(legCoordinates);
                    }

                    //Create a line from the route path points and add it to the data source.
                    var routeLine = new atlas.data.LineString(routeCoordinates);
                        datasource.add(routeLine);

                }
            });
        });
    }

    function processRequest(url) {
        //This is a reusable function that sets the Azure Maps platform domain, sings the request, and makes use of any transformRequest set on the map.
        return new Promise((resolve, reject) => {
            //Replace the domain placeholder to ensure the same Azure Maps cloud is used throughout the app.
            url = url.replace('{azMapsDomain}', atlas.getDomain());

            //Get the authentication details from the map for use in the request.
            var requestParams = map.authentication.signRequest({ url: url });

            //Transform the request.
            var transform = map.getServiceOptions().tranformRequest;
            if (transform) {
                requestParams = transform(request);
            }

            fetch(requestParams.url, {
                method: 'GET',
                mode: 'cors',
                headers: new Headers(requestParams.headers)
            })
                .then(r => r.json(), e => reject(e))
                .then(r => {
                    resolve(r);
                }, e => reject(e));
        });
    }

</script>

<div id="myMap" style="position:relative;width:100%;min-width:290px;height:600px;"></div>
<p>This application will not store your location.</p>

