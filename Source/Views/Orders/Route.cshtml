@model SampleDeliveryService.Models.Order

@{
    ViewData["Title"] = "Route";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- Azure Maps SDK -->
<script src="https://atlas.microsoft.com/sdk/javascript/mapcontrol/3/atlas.min.js"></script>
<link rel="stylesheet" href="https://atlas.microsoft.com/sdk/javascript/mapcontrol/3/atlas.min.css" />

<script type="text/javascript">
    var map, datasource;

    document.addEventListener("DOMContentLoaded", function () {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(showPosition, function (error) {
                alert("Geolocation failed: " + error.message + ". Using fallback location.");
                console.warn("Geolocation error:", error);
                // Fallback coordinates (Seattle)
                GetMap(47.6062, -122.3321);
            });
        } else {
            alert("Geolocation not supported. Using fallback location.");
            GetMap(47.6062, -122.3321);
        }

        function showPosition(position) {
            const user_lat = position.coords.latitude;
            const user_lon = position.coords.longitude;
            GetMap(user_lat, user_lon);
        }
    });

    function GetMap(user_lat, user_lon) {
        // Parse model coordinates safely
        const endLat = parseFloat("@Model.Latitude");
        const endLon = parseFloat("@Model.Longitude");
        const endPosition = [endLon, endLat];

        console.log("📍 User location:", user_lat, user_lon);
        console.log("📦 Drop-off location:", endLat, endLon);

        map = new atlas.Map('myMap', {
            center: [user_lon, user_lat],
            zoom: 12,
            view: 'Auto',
            authOptions: {
                authType: "subscriptionKey",
                subscriptionKey: "1A2WqGbNPrXkvJ7fANu170nqymSUlZupgApmCxJi4iqyLyA8yW07JQQJ99BDACYeBjFjiS1pAAAgAZMP21L5"
            }
        });

        map.events.add('ready', function () {
            datasource = new atlas.source.DataSource();
            map.sources.add(datasource);

            map.layers.add(new atlas.layer.LineLayer(datasource, null, {
                strokeColor: '#2272B9',
                strokeWidth: 5,
                lineJoin: 'round',
                lineCap: 'round'
            }), 'labels');

            map.layers.add(new atlas.layer.SymbolLayer(datasource, null, {
                iconOptions: {
                    image: ['get', 'iconImage'],
                    allowOverlap: true,
                    ignorePlacement: true
                },
                textOptions: {
                    textField: ['get', 'title'],
                    offset: [0, 1]
                }
            }));

            const startPosition = [user_lon, user_lat];

            const startPoint = new atlas.data.Feature(new atlas.data.Point(startPosition), {
                title: 'Your Location',
                iconImage: 'pin-blue'
            });

            const endPoint = new atlas.data.Feature(new atlas.data.Point(endPosition), {
                title: 'Drop-off',
                iconImage: 'pin-red'
            });

            datasource.add([startPoint, endPoint]);

            map.setCamera({
                bounds: atlas.data.BoundingBox.fromPositions([startPosition, endPosition]),
                padding: 50
            });

            const directionsUrl = `https://atlas.microsoft.com/route/directions/json?api-version=1.0&query=${user_lat},${user_lon}:${endLat},${endLon}&subscription-key=1A2WqGbNPrXkvJ7fANu170nqymSUlZupgApmCxJi4iqyLyA8yW07JQQJ99BDACYeBjFjiS1pAAAgAZMP21L5`;

            fetch(directionsUrl)
                .then(res => res.json())
                .then(data => {
                    if (!data.routes || !data.routes.length) {
                        alert("No route found.");
                        return;
                    }

                    const route = data.routes[0];
                    const coords = route.legs.flatMap(leg =>
                        leg.points.map(p => [p.longitude, p.latitude])
                    );

                    const routeLine = new atlas.data.Feature(new atlas.data.LineString(coords));
                    datasource.add(routeLine);
                })
                .catch(err => {
                    console.error("Route fetch failed:", err);
                    alert("Could not retrieve route.");
                });
        });
    }
</script>

<div id="myMap" style="position:relative;width:100%;min-width:290px;height:600px;"></div>
<p>This application will not store your location.</p>
